import os
import logging
import sqlite3
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
BOT_TOKEN = os.environ.get('8342641332:AAGhf3sYgJTKuhkMo0bZV4IfOxKRVctXobc')
ADMIN_IDS = [int(id.strip()) for id in os.environ.get('ADMIN_IDS', '1189229455').split(',') if id.strip()]

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–∏ –¥–ª—è Railway
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
DB_NAME = os.path.join(BASE_DIR, "works_database.db")
UPLOAD_FOLDER = os.path.join(BASE_DIR, "works_storage")

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –Ω–µ—Ç
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== –ë–ê–ó–ê –î–ê–ù–ù–´–• =====
def init_db():
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS categories (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL UNIQUE,
                parent_id INTEGER
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS files (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                category_id INTEGER,
                filename TEXT NOT NULL,
                file_path TEXT NOT NULL,
                file_size INTEGER,
                upload_date DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        main_categories = ['–¢–ï–•_–ú–ï–•', '–≠–õ_–¢–ï–•', '–ì–ï–û–î', '–ü–°–ö', '–ê–†–•', '–¢–û–°–ü']
        for category in main_categories:
            cursor.execute("INSERT OR IGNORE INTO categories (name, parent_id) VALUES (?, NULL)", (category,))
        
        conn.commit()
        conn.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# ===== –ö–û–ú–ê–ù–î–ê /start =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üìÅ –¢–ï–•_–ú–ï–•", callback_data="cat_1")],
            [InlineKeyboardButton("üìÅ –≠–õ_–¢–ï–•", callback_data="cat_2")],
            [InlineKeyboardButton("üìÅ –ì–ï–û–î", callback_data="cat_3")],
            [InlineKeyboardButton("üìÅ –ü–°–ö", callback_data="cat_4")],
            [InlineKeyboardButton("üìÅ –ê–†–•", callback_data="cat_5")],
            [InlineKeyboardButton("üìÅ –¢–û–°–ü", callback_data="cat_6")],
        ]
        
        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if user_id in ADMIN_IDS:
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="admin_add")])
            logger.info(f"–ê–¥–º–∏–Ω {user_id} –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É")
    
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üéì –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö =====
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        
        data = query.data
        logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {data}")
        
        if data.startswith("cat_"):
            category_id = int(data[4:])
            await show_files(query, category_id)
            
        elif data == "back_main":
            await start_from_callback(query)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")

async def show_files(query, category_id):
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        cursor.execute("SELECT name FROM categories WHERE id = ?", (category_id,))
        result = cursor.fetchone()
        
        if not result:
            await query.edit_message_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        category_name = result[0]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        cursor.execute("SELECT id, filename FROM files WHERE category_id = ?", (category_id,))
        files = cursor.fetchall()
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∞–π–ª–æ–≤
        keyboard = []
        for file_id, filename in files:
            keyboard.append([InlineKeyboardButton(f"üìÑ {filename}", callback_data=f"file_{file_id}")])
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")])
        
        conn.close()
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"üìÇ {category_name}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É:", reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_files: {e}")

async def start_from_callback(query):
    try:
        user_id = query.from_user.id
        
        keyboard = [
            [InlineKeyboardButton("üìÅ –¢–ï–•_–ú–ï–•", callback_data="cat_1")],
            [InlineKeyboardButton("üìÅ –≠–õ_–¢–ï–•", callback_data="cat_2")],
            [InlineKeyboardButton("üìÅ –ì–ï–û–î", callback_data="cat_3")],
            [InlineKeyboardButton("üìÅ –ü–°–ö", callback_data="cat_4")],
            [InlineKeyboardButton("üìÅ –ê–†–•", callback_data="cat_5")],
            [InlineKeyboardButton("üìÅ –¢–û–°–ü", callback_data="cat_6")],
        ]
        
        if user_id in ADMIN_IDS:
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="admin_add")])
    
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üéì –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_from_callback: {e}")

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Railway.")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(button_handler))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
