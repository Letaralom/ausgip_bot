import os
import logging
import sqlite3
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
BOT_TOKEN = os.environ.get('8342641332:AAGhf3sYgJTKuhkMo0bZV4IfOxKRVctXobc','YOUR_BOT_TOKEN_HERE')
ADMIN_IDS = [int(id.strip()) for id in os.environ.get('ADMIN_IDS', '123456789').split(',')]

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–∏
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
DB_NAME = os.path.join(BASE_DIR, "works_database.db")
UPLOAD_FOLDER = os.path.join(BASE_DIR, "works_storage")

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –Ω–µ—Ç
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# ===== –ë–ê–ó–ê –î–ê–ù–ù–´–• =====
def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS categories (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL UNIQUE,
            parent_id INTEGER
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS files (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            category_id INTEGER,
            filename TEXT NOT NULL,
            file_path TEXT NOT NULL,
            file_size INTEGER,
            upload_date DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    main_categories = ['–¢–ï–•_–ú–ï–•', '–≠–õ_–¢–ï–•', '–ì–ï–û–î', '–ü–°–ö', '–ê–†–•', '–¢–û–°–ü']
    for category in main_categories:
        cursor.execute("INSERT OR IGNORE INTO categories (name, parent_id) VALUES (?, NULL)", (category,))
    
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞!")

# ===== –ö–û–ú–ê–ù–î–ê /start =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [InlineKeyboardButton("üìÅ –¢–ï–•_–ú–ï–•", callback_data="cat_1")],
        [InlineKeyboardButton("üìÅ –≠–õ_–¢–ï–•", callback_data="cat_2")],
        [InlineKeyboardButton("üìÅ –ì–ï–û–î", callback_data="cat_3")],
        [InlineKeyboardButton("üìÅ –ü–°–ö", callback_data="cat_4")],
        [InlineKeyboardButton("üìÅ –ê–†–•", callback_data="cat_5")],
        [InlineKeyboardButton("üìÅ –¢–û–°–ü", callback_data="cat_6")],
    ]
    
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if user_id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="admin_add")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üéì –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=reply_markup)

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö =====
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data.startswith("cat_"):
        category_id = int(data[4:])
        await show_files(query, category_id)

async def show_files(query, category_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cursor.execute("SELECT name FROM categories WHERE id = ?", (category_id,))
    category_name = cursor.fetchone()[0]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cursor.execute("SELECT id, filename FROM files WHERE category_id = ?", (category_id,))
    files = cursor.fetchall()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∞–π–ª–æ–≤
    keyboard = []
    for file_id, filename in files:
        keyboard.append([InlineKeyboardButton(f"üìÑ {filename}", callback_data=f"file_{file_id}")])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")])
    
    conn.close()
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"üìÇ {category_name}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É:", reply_markup=reply_markup)

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
def main():
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()
